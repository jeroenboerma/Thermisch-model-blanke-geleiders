# -*- coding: utf-8 -*-
"""
Created on Thu Mar  9 11:35:35 2023

@author: AL27397
"""

""" 
In this script all heat flows will be defined as funtions. Simple ones can be 
combined in one function while complex heat flows require their own function
"""

import numpy as np
import Properties
from sympy import *

Material, Shape, Core, Location, Painted = Properties.Component()
Mc, Cpc, rho, rho0, alpha, epsilon = Properties.select_material(Material, Shape, Painted, Location)
Dh, ID, w, B, L, A, S, V, Ro, Sr = Properties.component_parameters(Shape, Core, rho0, epsilon)
M, Beta, Cpa, mu, labda, v = Properties.ambient_parameters()
g, sigma = Properties.PhyCo()
phis, r = Properties.Wheather(Material)


#Heat emitted by radiation
def Qemis(T, Te):
    Qemis = sigma*epsilon*(T**4-Te**4)*A
    return Qemis

#Heat influx by solar irradiation
def Qirr():
    if Location == "Inside":
        Qirr = 0
    elif Location == "Outside":
        Qirr = r*phis*Sr #From IEC 61597
    return Qirr

#Heat generated by Joule heating
def Qgen(I,T):
    Rdc = Ro*(1+alpha*(T-273.1))
    Rac, Ys, Xs = Properties.Rac(Rdc, Shape, Core, Dh, ID, rho0, L, alpha, T, w)
    Qgen = I**2*Rac

    return Qgen, Rac

#Heat lost due to convection
def Qconv(T, Te, Shape, Location):
    if Location == "Inside":
        if Shape == "Cylindrical":
            Gr = M**2*g*Beta*(T-Te)*Dh**3/mu**2                                 #Grashof number 
            Tf = (T+Te)/2 - 273.15                                              #Film temperature
            Pr = 0.715 - 2.5e-4*Tf                                              #Prandtl number corrected for changing temperature
            Ra = (3.912e19*(Te)**(-4.69))*Dh**3*(T-Te)                          #Rayleigh number according to IEC 60943 note
            NuD = 0.8*(Ra)**0.05 + 0.35*(Ra)**0.27                              #Nusselt according to IEC 60943
            h = NuD*labda/Dh                                                    #Convective heat transfer coefficient

            NuL = 0  #Keep zero as not applicable
            Re = 0   #Keep zero as not applicable
            Qconv = h*A*(T-Te)      #Natural convection

            if Ra > 10**12: #Limit of NuD equation
                print('Rayleigh number bigger than 10^12, outcome not valid!')   
                
        elif Shape == "Rectangular":
            Gr = M**2*g*Beta*(T-Te)*Dh**3/mu**2                         #Grashof number                                           
            Tf = (T+Te)/2 - 273.15                                      #Film temperature
            Pr = 0.715 - 2.5e-4*Tf                                      #Prandtl number
            Ra = (3.912e19*(Te)**(-4.69))*Dh**3*(T-Te)                  #Rayleigh number according to IEC 60943 note
            NuL = 0.68 + (0.670*Ra**(1/4))/(1+(0.492/Pr)**(9/16))**(4/9)#Average Nusselt number for free convection at a vertical plate (Page 559 Incropera's Heat and mass transfer)
            #NuL = 0.8*(Ra)**0.05 + 0.35*(Ra)**0.27                     #This formula can be used but the formula above gives better results
            h = NuL*labda/Dh
            
            NuD = 0     #Keep zero as not applicable
            Re = 0      #Keep zero as not applicable
            Qconv = h*A*(T-Te)      #Natural convection
            
            if Ra > 10**9:  #Limit to NuL equation
                print('Rayleigh number bigger than 10^9, outcome not valid!')  
        
        elif Shape == "Stranded":     
            Tf = (T+Te)/2 - 273.15                      #Film temperature
            vf = 1.32e-5 + 9.5e-8*Tf                    #Kinematic viscosity according to ELT 144_3
            Gr = Dh**3*(T-Te)*g/(Tf*vf**2)              #Grashof number according to ELT 144_3
            Pr = 0.715 - 2.5e-4*Tf                      #Prandtl number
            Ra = (3.912e19*(Te)**(-4.69))*Dh**3*(T-Te)  #Rayleigh number according to IEC 60943 note
            NuD = 0.8*(Ra)**0.05 + 0.35*(Ra)**0.27      #Nusselt number according to IEC 60943
            labdaf = 2.42e-2 + 7.2e-5*Tf                #Thermal conductivity of air according to ELT 144_3
            NuL = 0                                     #Keep zero as not applicable
            Ra = Gr*Pr
            Re = 0
            h = NuD*labdaf/Dh
            Qconv = np.pi*labdaf*(T-Te)*NuD*L

        return Qconv, h, Ra, Re, NuL, NuD

    elif Location == "Outside":
        if Shape == "Cylindrical":
            Pr = Cpa*mu/labda
            Tf = (T+Te)/2 - 273.15
            Pr = 0.715 - 2.5e-4*Tf                                           #Prandtl number
            #Re = M*v*Dh/mu                                             #Reynolds number
            Re = v*Dh*(1.644e9*(Te)**(-1.78))                           #Reynolds number according to IEC note
            #NuD = 0.3 + ((0.62*Re**(1/2)*Pr**(1/3))/(1+(0.4/Pr)**(2/3))**(1/4))*(1+(Re/282000)**5/8)**4/5 #Average Nusselt for forced convection horizontal cylinder (Page 424 Incropera's Heat and mass transfer)
            NuD = 0.65*Re**(0.2) + 0.23*Re**(0.61)                     #Nusselt number
            h = NuD*labda/Dh 
            Qconv = h*A*(T-Te)      #Natural convection
            
            NuL = 0
            Ra = 0
            
            if Re*Pr < 0.2:  #Limit 
                print('ReD*Pr smaller than 0.2, outcome not valid!')
        
        elif Shape == "Rectangular":
            #Re = M*v*Dh/mu                                             #Reynolds number 
            Re = v*Dh*(1.644e9*(Te)**(-1.78))                          #Reynolds number according to IEC note
            NuL = 0.65*Re**(0.2) + 0.23*Re**(0.61)                     #Nusselt number
            h = NuL*labda/Dh
            Qconv = h*A*(T-Te)      #Natural convection
            
            Ra = 0
            NuD = 0
         
        elif Shape == "Stranded":    
            Tf = ((T+Te)/2)-273.15              #Film temperature
            vf = 1.32e-5 + 9.5e-8*Tf            #Kinematic viscosity
            labdaf = 2.42e-2 + 7.2e-5*Tf        #Thermal conductivity, corrected for temperature
            #Re = v*Dh/vf
            Re = v*Dh*(1.644e9*(Te)**(-1.78))                           #Reynolds number according to IEC note
            Ra = 0
            NuL = 0
            NuD = 0.65*Re**0.2 + 0.23*Re**0.61      #IEC TR 61597
            h = NuD*labdaf/Dh
            Qconv = np.pi*labdaf*(T-Te)*NuD*L
            
        return Qconv, h, Ra, Re, NuL, NuD

#Heat absorbed by material leading to temperature rise
def Qabsorb():
    return Mc, Cpc, V
    